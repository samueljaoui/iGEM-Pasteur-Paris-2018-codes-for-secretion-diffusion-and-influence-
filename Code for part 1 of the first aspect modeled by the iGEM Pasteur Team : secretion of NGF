
##This script consists in the ODE system that modelizes secretion of recombinant proNGF by engineered E. coli and 
the function necessary to numerically resolve this function using Euler method. 
It then permits to plot evolution of concentration with time, making the parameter value vary (induction level, transcription rate..).##



In [48]: import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
In [49]: def dydt (y,nt,ind):

# calculate right hand side dxdt = x for one bacterial cell

N = 1000; # plasmid copy number
r = 1000;# ribosome number
c = nt; # transporter concentration (1 transporter <-> 1 nM)
I = ind; # IPTG concentration
kt = 0.92;# IPTG diffusion rate (/min)
ki = 3*10**-5;# IPTG binding to repressor
k_i = 4800;
kr = 1 # ribosome binding to rbs
k_r = 0.1 # reverse
alpha = 2 # transcription rate
beta = 4 # translation rate
k1 = 0.00000078 # NGF TEV binding in cytoplasm
k_1 = 0.0006
k2 = 0.00138 # TEV cleaving rate in cytoplasm
k3 = 0.0006 # NGF transporter binding
k_3 = 2.34
k4 = 2.1 # NGF and TEV translocation rate
k5 = 0.000078 # NGF TEV binding in medium
k_5 = 0.06
k6 = 13.8 # TEV cleaving rate in cytoplasm
kf = 0.28 # NGF folding rate

dil=1 # dilution factor when coming from inside the cell to the medium

dm = 0.462 #mRNA degradation rate
dpc = 0.2 # protein degradation in cytoplasm
dpm = 0.1 # protein degradation in medium

dydt=np.zeros(17)
# ODE's of the system

dydt[0] = kt*y[1] - kt*y[0];
dydt[1] = kt*y[0] - kt*y[1] - ki*y[1]*y[2] + k_i*y[3]*(I-y[0]-y[1]);
dydt[2] = - ki*y[1]*y[2] + k_i*y[3]*(I-y[0]-y[1]);
dydt[3] = ki*y[1]*y[2] - k_i*y[3]*(I-y[0]-y[1])
dydt[4] = alpha*y[3] - kr*r*y[4] + k_r*y[5] + beta*y[5] - dm*y[4];
dydt[5] = kr*r*y[4] - (k_r+beta)*y[5];
dydt[6] = 0.5*beta*y[5] - k1*y[8]*y[6] + k_1*y[10] - k3*c*y[6] + k_3*y[7]- dpc*y[6];
dydt[7] = k3*c*y[6] - (k_3+k4)*y[7];
dydt[8] = 0.5*beta*y[5] - k1*y[8]*y[6] + k_1*y[10] - k3*c*y[8] + k_3*y[9]- dpc*y[8];
dydt[9] = k3*c*y[8] - (k_3+k4)*y[9];
dydt[10] = k1*y[6]*y[8] - (k_1+k2)*y[10];
dydt[11] = k4*y[9] - k5*y[13]*y[11] + (k_5+k6)*y[14] - dpm*y[11];
dydt[12] = k4*y[7] - kf*y[12]- dpm*y[12];
dydt[13] = kf*y[12] - k5*y[13]*y[11] + k_5*y[14]- dpm*y[13];
dydt[14] = k5*y[13]*y[11] - (k_5+k6)*y[14];
dydt[15] = k6*y[14]- dpm*y[15]
dydt[16] = k2*y[10]- dpm*y[16] #NGF cleaved in cytoplasm

return dydt

In [50]: def euler(f,y0,t0,tf,n,nt,ind):

t=t0
y=y0
h=(tf-t0)/n
temps =np.zeros(n)
res=np.zeros([n,17])
for i in range (n):
dy=dydt(y,nt,ind)
newy = y + h * dy
for j in range(len(newy)):
if newy[j]<0:
newy[j]=0
res[i]=newy
y=newy
temps[i]=t
t=t+h

return temps,res

In [52]: y0 = np.array([1000, 0, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0])
trans=[0,1,10,100,300,500]
for t in trans:
temps,res=euler(dydt,y0,0,2000,2000000,t,1000)
cyto=res[:,6]+res[:,16]
func=res[:,15]
non_func=res[:,12]+res[:,13]
plt.plot(temps,func,'c',label='functional secreted NGF')
plt.plot(temps,non_func,'y',label='non functional secreted NGF')
2
plt.plot(temps,cyto,'g',label='NGF in cytoplasm')
plt.xlabel('time (min)')
plt.ylabel('NGF (nM)')
plt.title('NGF amount versus time')
plt.legend()
plt.show()

In [34]: y0 = np.array([1000, 0, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0])
IPTG=[0,100,500,1000]
for i in IPTG:
y0 = np.array([i, 0, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0])
temps,res=euler(dydt,y0,0,1000,1000000,300,i)
plt.plot(temps,res[:,15],'r',label='secreted cleaved NGF')
plt.plot(temps,res[:,12],'y',label='secreted uncleaved unfolded NGF')
plt.plot(temps,res[:,7],'g',label='uncleaved NGF in cytoplasm')
plt.plot(temps,res[:,16],'c',label='cleaved NGF in cytoplasm')
plt.plot(temps,res[:,13],'m',label='secreted uncleaved folded NGF')
plt.xlabel('time (min)')
plt.ylabel('NGF (nM)')
plt.title('NGF amount versus time')
plt.legend()
plt.show()

In [6]: def cell_growth(res,growth):
# takes table for one cell and a bacterial growth curve,
# and fit the protein production to the evolution of the bacterial population
new_res=np.zeros(res.shape)
new_res[:,0]=res[:,0]
for i in range (1,17):
new_res[:,i]=res[:,i]*growth
return (new_res)
In [9]: # including cell growth
IPTG=[0,100,500,1000]
cell_pop=np.linspace(9*10**8,10**9,100000)
dil=10**(-8)
for i in IPTG:
y0 = np.array([i, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0])
temps,res=euler(dydt,y0,0,1000,100000,500,i)
res=cell_growth(res,cell_pop)
plt.plot(temps,res[:,15]*24*dil)
plt.xlabel('time (min)')
plt.ylabel('NGF (ng/mL)')
plt.title('Secreted NGF versus time')
plt.show()

In [385]: # without cell growth
IPTG=[0,0.1,0.5,1]
sec_NGF=[]
for i in IPTG:
y0 = np.array([i, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0])
temps,res=euler(dydt,y0,0,200,10000,500,i)
sec_NGF.append(res[-1,15])
plt.plot(temps,res[:,15],)
plt.xlabel('time (min)')
plt.ylabel('NGF (nM)')
plt.title('Secreted NGF versus time')
plt.show()

In [54]: def dydtbis (y,nt,ind,k):
# calculate right hand side dxdt = x for one bacterial cell
N = 1000; # plasmid copy number
r = 1000;# ribosome number
c = nt; # transporter concentration (1 transporter <-> 1 nM)
I = ind; # IPTG concentration
kt = 0.92;# IPTG diffusion rate (/min)
ki = 3*10**-5;# IPTG binding to repressor
k_i = 4800;
kr = 1 # ribosome binding to rbs
k_r = 0.1 # reverse
alpha = 2 # transcription rate
beta = 4 # translation rate
k1 = 0.00000078 # NGF TEV binding in cytoplasm
k_1 = 0.0006
k2 = 0.00138 # TEV cleaving rate in cytoplasm
k3 = 0.0006 # NGF transporter binding
k_3 = 2.34
k4 = k # NGF and TEV translocation rate
k5 = 0.000078 # NGF TEV binding in medium
k_5 = 0.06
k6 = 13.8 # TEV cleaving rate in cytoplasm
kf = 0.28 # NGF folding rate

dil=1 # dilution factor when coming from inside the cell to the medium

dm = 0.462 #mRNA degradation rate
dpc = 0.2 # protein degradation in cytoplasm
dpm = 0.1 # protein degradation in medium

dydt=np.zeros(17)

# ODE's of the system

dydt[0] = kt*y[1] - kt*y[0];
dydt[1] = kt*y[0] - kt*y[1] - ki*y[1]*y[2] + k_i*y[3]*(I-y[0]-y[1]);
dydt[2] = - ki*y[1]*y[2] + k_i*y[3]*(I-y[0]-y[1]);
dydt[3] = ki*y[1]*y[2] - k_i*y[3]*(I-y[0]-y[1])
dydt[4] = alpha*y[3] - kr*r*y[4] + k_r*y[5] + beta*y[5] - dm*y[4];
dydt[5] = kr*r*y[4] - (k_r+beta)*y[5];
dydt[6] = 0.5*beta*y[5] - k1*y[8]*y[6] + k_1*y[10] - k3*c*y[6] + k_3*y[7]- dpc*y[6];
dydt[7] = k3*c*y[6] - (k_3+k4)*y[7];
dydt[8] = 0.5*beta*y[5] - k1*y[8]*y[6] + k_1*y[10] - k3*c*y[8] + k_3*y[9]- dpc*y[8];
dydt[9] = k3*c*y[8] - (k_3+k4)*y[9];
dydt[10] = k1*y[6]*y[8] - (k_1+k2)*y[10];
dydt[11] = dil*k4*y[9] - k5*y[13]*y[11] + (k_5+k6)*y[14] - dpm*y[11];
dydt[12] = dil*k4*y[7] - kf*y[12]- dpm*y[12];
dydt[13] = kf*y[12] - k5*y[13]*y[11] + k_5*y[14]- dpm*y[13];
dydt[14] = k5*y[13]*y[11] - (k_5+k6)*y[14];
dydt[15] = k6*y[14]- dpm*y[15]
dydt[16] = k2*y[10]- dpm*y[16] #NGF cleaved in cytoplasm

return dyd


In [55]: def eulerbis(f,y0,t0,tf,n,nt,ind,k):
t=t0
y=y0
h=(tf-t0)/n
temps =np.zeros(n)
res=np.zeros([n,17])
for i in range (n):
dy=dydtbis(y,nt,ind,k)
newy = y + h * dy
for j in range(len(newy)):
if newy[j]<0:
newy[j]=0
res[i]=newy
y=newy
temps[i]=t
t=t+h
return temps,res


In [58]: y0 = np.array([1000, 0, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0])
tabk=[0.5,1,1.5,2,2.5,3,3.5,4]
fNGF=np.zeros(len(tabk))
sNGF=np.zeros(len(tabk))
for i in range(len(tabk)):
temps,res=eulerbis(dydtbis,y0,0,2000,2000000,500,1000,tabk[i])
cyto=res[:,6]+res[:,16]
func=res[:,15]
non_func=res[:,12]+res[:,13]
fNGF[i]=func[-1]
sNGF[i]=func[-1]+non_func[-1]
plt.plot(temps,func,'c',label='functional secreted NGF')
plt.plot(temps,non_func,'y',label='non functional secreted NGF')
plt.plot(temps,cyto,'g',label='NGF in cytoplasm')

plt.xlabel('time (min)')
plt.ylabel('NGF (nM)')
plt.title('NGF amount versus time')
plt.legend()
plt.show()

plt.plot(tabk,fNGF,'c',label='functional secreted NGF')
plt.plot(tabk,sNGF,'y',label='total secreted NGF')
plt.xlabel('Translocation rate k4')
plt.ylabel('NGF (nM)')
plt.title('Secreted NGF versus translocation rate')
plt.legend()
plt.show()



In [67]: IPTG=[0,100,200,500,1000]
sec_NGF=np.zeros(len(IPTG))
func_NGF=np.zeros(len(IPTG))
cyto_NGF=np.zeros(len(IPTG))
ratio=np.zeros(len(IPTG))
for i in range(len(IPTG)):
y0 = np.array([IPTG[i], 0, 1000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
temps,res=euler(dydt,y0,0,2000,2000000,500,IPTG[i])
cyto=res[:,6]+res[:,16]
func=res[:,15]
non_func=res[:,12]+res[:,13]
func_NGF[i]=func[-1]
cyto_NGF[i]=cyto[-1]
sec_NGF[i]=func[-1]+non_func[-1]
ratio[i]=func_NGF[i]/(func_NGF[i]+cyto_NGF[i]+ sec_NGF[i])

plt.plot(temps,func,'c',label='functional secreted NGF')
plt.plot(temps,non_func,'y',label='total secreted NGF')
plt.plot(temps,cyto,'g',label='cytoplasmic NGF')
plt.xlabel('time (min)')
plt.ylabel('NGF (nM)')
plt.title('NGF amount versus time')
plt.legend()
plt.show()

barWidth = 0.25
r1 = range(len(IPTG))
r2 = [x + barWidth for x in r1]
r3 = [x + barWidth for x in r2]

plt.bar(r3, func_NGF, width = barWidth, color = ['c' for i in func_NGF])
plt.bar(r1, sec_NGF, width = barWidth, color = ['y' for i in sec_NGF])
plt.bar(r2, cyto_NGF, width = barWidth, color = ['g' for i in cyto_NGF])
plt.xticks([r + barWidth for r in range(len(IPTG))], IPTG)
plt.xlabel('IPTG induction (M)')
plt.ylabel('NGF amount (nM)')
plt.title('Final NGF concentration for different IPTG inductions')
plt.show()
plt.bar(IPTG,ratio,width= barWidth)
plt.xlabel('IPTG induction')
plt.ylabel('Percentage of secreted NGF')
plt.title('Ratio of secreted NGF over total NGF versus number of transporters')
plt.show()


In [68]: barWidth = 0.25
r1 = range(len(IPTG))
r2 = [x + barWidth for x in r1]
r3 = [x + barWidth for x in r2]
plt.bar(r3, func_NGF, width = barWidth, color = ['c' for i in func_NGF],label='secreted functional NGF')
plt.bar(r1, sec_NGF, width = barWidth, color = ['y' for i in sec_NGF], label='total secretd NGF')
plt.bar(r2, cyto_NGF, width = barWidth, color = ['g' for i in cyto_NGF], label='cytoplasmic NGF')
plt.xticks([r + barWidth for r in range(len(IPTG))], IPTG)
plt.xlabel('IPTG induction (M)')
plt.ylabel('NGF amount (nM)')
plt.title('Final NGF concentration for different IPTG inductions')
plt.legend()
plt.show()

